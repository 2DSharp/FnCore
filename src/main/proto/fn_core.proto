syntax = "proto3";

option java_package = "me.twodee.friendlyneighbor";
option java_outer_classname = "FnCoreGenerated";
option java_generic_services = true;

/*  FNCore provides the core functionalities of FriendlyNeighbor
    NOTE:
    For every request, the response comes encapsulated in a message
    with a Result as metadata to the actual result. Use the
    metadata to check the success/failure status along with any error
    messages.

    Error messages are user friendly and can be directly forwarded to the client.
 */
service FnCore {

    /* Save (and update) user's default location */
    rpc SaveUserLocation (RegistrationRequest) returns (Result) {
    }

    /* Delete a user location permanently */
    rpc DeleteUserLocation (UserIdentifier) returns (Result) {
    }

    /* Registers the already existing user for notifications */
    rpc SaveUserForNotifications (NotificationIdentifier) returns (Result) {
    }

    /* Notifies a user if there's a new response */
    rpc NotifyForResponse (ResponseNotification) returns (Result) {
    }

    /* Fetch a user's default location */
    rpc GetUserLocation (UserIdentifier) returns (LocationRadiusResult) {
    }

    /*  Given a search request with a custom location and radius, find users in the vicinity
        with their distance
        You NEED TO PASS THE USER ID
     */
    rpc FindUsersInCircleByLocation (SearchAreaRequest) returns (NearbyUsersResult) {
    }

    /*  Given a search request with a registered UID, find users in the vicinity
        with their distance
     */
    rpc FindUsersInCircleById (UserIdentifier) returns (NearbyUsersResult) {
    }

    /*  Push a Post to users feeds nearby based on the user identifier */
    rpc ForwardRequestNearbyCustomLocation (PostData) returns (Result) {
    }

    /*  Push a Post to users feeds nearby based on a custom location and radius
        Still needs userId to be transmitted
     */
    rpc ForwardRequestNearbyDefaultLocation (PostData) returns (Result) {
    }

    /*  Pull posts to a users feed based on their identifier */
    rpc FetchRequestsNearby (UserIdentifier) returns (RequestsNearby) {
    }

    /* Delete a request */
    rpc DeleteRequest (PostData) returns (Result) {
    }
}

message NotificationIdentifier {
    string userId = 1;
    string notifyToken = 2;
}

message ResponseNotification {
    string userId = 1;
    string nameOfRespondingUser = 2;
}

message LocationRadiusResult {
    Location location = 1;
    double radius = 2;
    Result metaResult = 3;
}

message PostData {
    string userId = 1;
    Location location = 2; // optional for forwardBy ForwardRequestNearbyDefaultLocation
    double radius = 3; // optional for forwardBy ForwardRequestNearbyDefaultLocation
    string postId = 4;
    enum Type {
        REQUEST = 0;
        OFFERING = 1;
    }
    Type type = 5;
    string title = 6;
}

message RequestsNearby {
    repeated PostOutput requests = 1;
    Result metaResult = 2;
}

message PostOutput {
    string postId = 1;
    double distance = 2;
}

message RegistrationRequest {
    /* This can also be used for updating a user's default location */
    string userId = 1;
    Location location = 2;
    double radius = 3;
}

message UserIdentifier {
    string userId = 1;
}

message Result {
    /*  Each result from an API call will return an object containing
        the Result message as metadata. Run checks first before proceeding
    */
    bool success = 1;
    map<string, string> errors = 2;
}

message UserNearby {
    string userId = 1;
    double distance = 2;
}

message NearbyUsersResult {
    repeated UserNearby user = 1;
    Result metaResult = 2;
}

message Location {
    double latitude = 1;
    double longitude = 2;
}

message SearchAreaRequest {
    Location location = 1;
    double radius = 2;
    string userId = 3;
}